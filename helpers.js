const axios = require('axios')
// importing arrays with phrases/quotes needed
const phrases = require('./src/phrases')
const quotes = require('./src/quotes')
// emodjis package
const emoji = require('node-emoji')
// for env variables
require('dotenv').config()
// for postgres
const pgp = require('pg-promise')()
const DATABASE_URL = process.env.DATABASE_URL
const db = pgp(DATABASE_URL)

// function to handle weather requests
const getWeather = async (latitude, longitude) => {
  const apiKey = process.env.OPEN_WEATHER_KEY
  const apiUrl = 'https://api.openweathermap.org/data/2.5/weather'

  try {
    const response = await axios.get(apiUrl, {
      params: {
        lat: latitude,
        lon: longitude,
        appid: apiKey
      }
    })
    const weatherData = response.data

    // converting received kelvin to celsius
    const kelvin = weatherData.main.temp
    const celsius = Math.floor(kelvin - 273.15)

    // logic for message in accordance to temperature
    if (celsius <= 3) {
      const weatherMessage = `ü•∂ –ë—Ä—Ä—Ä! –°—å–æ–≥–æ–¥–Ω—ñ —Ö–æ–ª–æ–¥–Ω–æ - ${celsius}¬∞C –æ–¥—è–≥–∞–π—Å—è —Ç–µ–ø–ª—ñ—à–µ`
      return weatherMessage
    } else if (celsius > 3 && celsius <= 12) {
      const weatherMessage = `üÜí –ü—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ - ${celsius}¬∞C. –ë–∞–∂–∞–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç–∏ —Å–≤—ñ–π –∞—É—Ç—Ñ—ñ—Ç üëò`
      return weatherMessage
    } else if (celsius > 12 && celsius <= 24) {
      const weatherMessage = `üòé –°—å–æ–≥–æ–¥–Ω—ñ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞ –ø–æ–≥–æ–¥–∞ - ${celsius}¬∞C`
      return weatherMessage
    } else {
      const weatherMessage = `ü•µ –£—Ñ! –°–ø–µ–∫–∞ - ${celsius}¬∞C`
      return weatherMessage
    }
  } catch (error) {
    console.error('Error fetching data:', error.message)
    return 'Sorry I was unable to fetch data'
  }
}

// random message for all users
const getRandomMessage = () => {
  const emojis = [' ü§î', ' üß†', ' üòâ', ' üòé', ' üåû', ' üôÇ', ' ü§©', ' ü¶¶', ' ‚ú®', ' üé≤', ' üé®']
  return quotes[Math.floor(Math.random() * quotes.length)] + emojis[Math.floor(Math.random() * emojis.length)]
}

// random message for one particular user
const getRandomMessageForNastya = () => {
  const emojis = [' üíñ', ' ‚ú®', ' ü•π', ' ü•∞', ' üåû', ' ü´∂üèº', ' üòò', ' üòç', ' üíì']
  return phrases[Math.floor(Math.random() * phrases.length)] + emojis[Math.floor(Math.random() * emojis.length)]
}

// commands setupper
const setCommands = (bot) => {
  bot.setMyCommands([
    { command: "/start", description: "–î–ª—è –ø–æ—á–∞—Ç–∫—É" },
    { command: "/film", description: "–ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É" },
    { command: "/care", description: "–¢—É—Ä–±–æ—Ç–∞" },
    { command: "/info", description: "–Ü–Ω—Ñ–æ" },
    { command: "/users", description: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ" },
  ])
}

// sends total amount of users
const sendUsersMessage = async (bot, msg) => {
  const chatId = msg.chat.id
  const usersAmount = await db.many('SELECT COUNT(*) FROM user_data')
  const emojiUser = emoji.get(':man_technologist:')
  bot.sendMessage(chatId, `${emojiUser} –ù–∞—Ä–∞–∑—ñ –±–æ—Ç –º–∞—î —Ç–∞–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: "${usersAmount[0].count}"`)
}

// sends message at /start command
const sendStartMessage = (bot, msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name;
  const loveEmoji = emoji.get('heart')
  const secretEmoji = emoji.get('love_letter')
  const startMessageNastya = `${loveEmoji} –ü—Ä–∏–≤—ñ—Ç ${firstName}! –Ø —Ç–≤—ñ–π –±–æ—Ç. –ù–∞—Ç–∏—Å–∫–∞–π`
  const startMessage = `üëã –ü—Ä–∏–≤—ñ—Ç ${firstName}! –Ø —Ç–≤—ñ–π –±–æ—Ç. –ù–∞—Ç–∏—Å–∫–∞–π`

  if (chatId === 606289979) {
    bot.sendMessage(chatId, startMessageNastya, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: secretEmoji + '–°–µ–∫—Ä–µ—Ç–Ω–µ –ø–æ—Å–ª–∞–Ω–Ω—è', callback_data: 'secret' }
          ],
        ],
      },
    })
  } else {
    bot.sendMessage(chatId, startMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üßê –°–µ–∫—Ä–µ—Ç–Ω–µ –ø–æ—Å–ª–∞–Ω–Ω—è', callback_data: 'secret' }
          ],
        ],
      },
    })
  }
}

// location and weather handler
const sendCareMessage = (bot, msg) => {
  const chatId = msg.chat.id;
  const compassEmoji = emoji.get('compass')
  const earthEmoji = emoji.get('earth_americas')
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: compassEmoji + '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', request_location: true }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  };
  bot.sendMessage(chatId, earthEmoji + '–í—ñ–¥–ø—Ä–∞–≤ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é', opts)
}

// /info command handler
const sendInfoMessage = (bot, msg) => {
  const chatId = msg.chat.id;
  const infoMessage =
    `üöÄ /start - –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–ª–∞–Ω–Ω—è —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å —ñ –∫–Ω–æ–ø–∫–∞ —Å–µ–∫—Ä–µ—Ç

üåç /care - –∑–∞–ø–∏—Ç—É—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≥–æ–¥—É –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–Ω–∫—É

üë• /users - –Ω–∞–¥—Å–∏–ª–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞

üéûÔ∏è /film - —à—É–∫–∞—î –ø–æ—Å—Ç–µ—Ä, –Ω–∞–∑–≤—É —ñ –æ–ø–∏—Å —Ñ—ñ–ª—å–º—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)`
  bot.sendMessage(chatId, infoMessage)
};

// final weather sender
const sendWeather = async (bot, chatId, latitude, longitude) => {
  try {
    const weatherMessage = await getWeather(latitude, longitude)
    await bot.sendMessage(chatId, weatherMessage)
  } catch (error) {
    console.error(`Error sending weather message to ${chatId}:`, error.message)

    if (error.response && error.response.status === 403) {
      console.log(`User ${chatId} has blocked the bot. Handle accordingly.`);
    } else {
      await bot.sendMessage(chatId, 'Sorry, something went wrong. Please contact support.');
    }
  }
};

// for /film command
const sendFilmMessage = (bot, chatId) => {
  const genreKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {text: '–ï–∫—à–Ω', callback_data: 'Action'},
            {text: '–ü—Ä–∏–≥–æ–¥–∏', callback_data: 'Adventure'},
            {text: '–ê–Ω—ñ–º–æ–≤–∞–Ω–∏–π', callback_data: 'Animation'},            
          ],
          [
            {text: '–ö–æ–º–µ–¥—ñ—è', callback_data: 'Comedy'},
            {text: '–ö—Ä–∏–º—ñ–Ω–∞–ª', callback_data: 'Crime'},
            {text: '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª–∫–∞', callback_data: 'Documentary'},            
          ],
          [
            {text: '–î—Ä–∞–º–∞', callback_data: 'Drama'},
            {text: '–°—ñ–º–µ–π–Ω–∏–π', callback_data: 'Family'},
            {text: '–§–µ–Ω—Ç–µ–∑—ñ', callback_data: 'Fantasy'},            
          ],
          [
            {text: '–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π', callback_data: 'History'},
            {text: '–•–æ—Ä–æ—Ä', callback_data: 'Horror'},
            {text: '–ú—é–∑–∏–∫–ª', callback_data: 'Music'},            
          ],
          [
            {text: '–¢–∞—î–º–Ω–∏—Ü—è', callback_data: 'Mystery'},
            {text: '–†–æ–º–∞–Ω—Ç–∏–∫–∞', callback_data: 'Romance'},
            {text: '–ù–∞—É–∫–æ–≤–∞ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', callback_data: 'Science fiction'},            
          ],
          [
            {text: '–¢—Ä–∏–ª–µ—Ä', callback_data: 'Thriller'},
            {text: '–í—ñ–π—Å—å–∫–æ–≤–∏–π', callback_data: 'War'},
            {text: '–í–µ—Å—Ç–µ—Ä–Ω', callback_data: 'Western'},            
          ],
        ] 
  }
}
  bot.sendMessage(chatId, 'üîç –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É, –æ–±–µ—Ä–∏ –∂–∞–Ω—Ä:', genreKeyboard)
}

// exporting modules
module.exports = {
  db,
  sendUsersMessage,
  getWeather,
  getRandomMessage,
  setCommands,
  sendStartMessage,
  sendCareMessage,
  sendWeather,
  sendInfoMessage,
  getRandomMessageForNastya,
  sendFilmMessage,
}